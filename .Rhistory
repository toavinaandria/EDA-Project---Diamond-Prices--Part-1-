my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames()
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE &c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE }} c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 ! = 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints < - sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
sumbit()
submit()
submit()
boring_function('My first function! ')
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
submit()
my_mean(c(4,5,10))
submit
asd
asd
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("Johnty is fat")
submit()
mad_libs("Paris","gay","cunt")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flags_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6)
as
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$lanmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4 replace = TURE)
sample(1:6, 4 replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 1, prob = 0.7)
flips2 <- rbinom(size = 1, prob = 0.7)
flips2 <- rbinom(n=100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnotm()
?rnor,
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(n =5, mean=10)
rpois(n =5, mean=10)
rpois(n =5)
rpois(n =5, lambda = 1-)
rpois(n =5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time >t1
Sys.time() >t1
Sys.time() - t1
difftime(Systime(), t1, units = 'days'
difftime(Systime(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y=cars$distance)
plot(x= cars$speed, y=cars$distance)
plot(x= cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y= cars$dist)
plot(x=cars$speed, y= cars$dist, xlab = "Speed")
plot(x=cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y= cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y= cars$dist, ylab = "Stopping Distance", xlab="Speed ")
plot(x = cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance",)
plot(x = cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Ploy")
plot(x = cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
asd
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl,)
b
asd
boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Data Analysis")
install_from_swirl("ErrFind")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Overview_of_Statistics")
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
swirl()
ggplot()
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year()))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
exit
exit()
quit()
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?se;ect
?se;ect
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size /2^20)
mutate(cran3, size_mb = size /2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cram
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count >679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
as
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
Submit()
Submit()
submit
submit()
submit()
submit()
subit()
submit()
library(tidyt)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class")
asd
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
asd
submit()
submit()
asd
reset()
help()
result()
solution()
submit
submit()
extract_numeric("class5")
submit()
submit()
students4
setwd("~/R/Springboard outputs/EDA Project - Diamond Prices (Part 1)")
ggplot(birthdays, aes(x=month))+
geom_bar()+
stat_bin(aes(label=..count..), geom="text")
# Load the relevant libraries and the diamonds dataset into a dataframe
library(ggplot2)
library(dplyr)
library(tidyr)
data(diamonds)
diamonds <- tbl_df(diamonds)
# Chunk 1
# Load the relevant libraries and the diamonds dataset into a dataframe
library(ggplot2)
library(dplyr)
library(tidyr)
data(diamonds)
diamonds <- tbl_df(diamonds)
# Chunk 2
nrow(diamonds)
ncol(diamonds)
summarise_each(diamonds, funs(n_distinct))
# Chunk 3
ggplot(aes(x=price), data = diamonds)+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 500)
# Chunk 4
sum(diamonds$price<500)
sum(diamonds$price<250)
sum(diamonds$price>=15000)
# Chunk 5
ggplot(aes(x=price), data = diamonds)+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 50)+
scale_x_continuous(lim=c(250,2000), breaks = seq(200,2000,100))
# Chunk 6
ggplot(aes(x=price), data = diamonds)+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 500)+
facet_wrap(~cut)
#Note: The code below was used to find granular information to answer the questions below:
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, median)
# Chunk 7
ggplot(aes(x=price), data = diamonds)+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 500)+
facet_wrap(~cut, scales = "free_y")
# Chunk 8
ggplot(aes(x=price/carat), data = diamonds)+
geom_histogram(color = 'black', fill = '#F79420')+
facet_wrap(~cut, scales = "free_y")+
xlab('Price per carat')+
scale_x_log10()
# Chunk 9
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
# There won't be a solution video for this
# exercise so go to the discussion thread for either
# BOXPLOTS BY CLARITY, BOXPLOT BY COLOR, or BOXPLOTS BY CUT
# to share you thoughts and to
# see what other people found.
# You can save images by using the ggsave() command.
# ggsave() will save the last plot created.
# For example...
#                  qplot(x = price, data = diamonds)
#                  ggsave('priceHistogram.png')
# ggsave currently recognises the extensions eps/ps, tex (pictex),
# pdf, jpeg, tiff, png, bmp, svg and wmf (windows only).
# Copy and paste all of the code that you used for
# your investigation, and submit it when you are ready.
# =================================================================
#I will do it by color to make it different
qplot(x=color, y=price, data = diamonds, geom = "boxplot")
by(diamonds$price, diamonds$color, quantile)
by(diamonds$price, diamonds$color, IQR)
# Chunk 10
ggplot(aes(x=color, y=price/carat), data=diamonds)+
geom_boxplot()
# Chunk 11
ggplot(aes(x=carat), data=diamonds)+
geom_freqpoly(binwidth = .1)+
scale_x_continuous(lim=c(0,2.5), breaks=seq(0,5,0.1))+
scale_y_continuous(breaks=seq(0,10500,1000))
# Chunk 12
working_hours <- read.csv("indicator_hours per week.csv")
working_hours <- tbl_df(working_hours)
# Note: Dplyr and Tidyr are already loaded
# Chunk 13
# The code below renames the country column correctly, deletes the empty row and the empty column at the end of the CSV
working_hours <- working_hours %>%
rename(Country = Working.hours.per.week) %>%
select(-X)
working_hours <- working_hours[working_hours$Country != "",]
# The code below creates a new tableframe to tidy the data
working_hours <- gather(working_hours, Year, Hours, -Country)
working_hours <- tbl_df(working_hours)
working_hours <- working_hours %>% mutate(Year = substr(Year,2,5))
# Chunk 14
n_distinct(working_hours$Country)
summary(working_hours$Hours)
sum(!is.na(working_hours$Hours))
# Chunk 15
ggplot(data = working_hours, aes(x=Hours))+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 1)+
scale_x_continuous(limits = c(25,60), breaks = seq(25,60,5))
# Chunk 16
ggplot(data = working_hours, aes(x=Hours))+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 1)+
scale_x_continuous(limits = c(25,60), breaks = seq(25,60,5))+
facet_wrap(~Country, scales = "free")
# Chunk 17
ggplot(data = working_hours, aes(x=Hours))+
geom_histogram(color = 'black', fill = '#F79420', binwidth = 1)+
scale_x_continuous(limits = c(25,60), breaks = seq(25,60,5))+
facet_wrap(~Year, scales = "free")
# Chunk 18
ggplot(data=subset(working_hours, Country %in% c('Japan', 'Korea, Rep.', 'France', 'United Kingdom', 'Italy')), aes(x=Year, y=Hours, color=Country, group=Country))+
geom_line()+
scale_y_continuous(breaks=seq(20,60,1))
# Chunk 19
ggplot(data=subset(working_hours, Country %in% c('Japan', 'Korea, Rep.', 'France', 'United Kingdom', 'Italy')), aes(x=Country, y=Hours, color=Country, group=Country))+
geom_boxplot()+
ylab('Average Hours Worked per Week - 1980-2007')
selected_countries <- working_hours %>%
filter(Country %in% c('Japan', 'Korea, Rep.', 'France', 'United Kingdom', 'Italy'))
by(selected_countries$Hours,selected_countries$Country,summary)
# Chunk 20
birthdays <- read.csv('birthdaysExample.csv')
birthdays <- arrange(birthdays, dates)
birthdays <- separate(birthdays, dates, c("month","day", "year"), sep="/", remove = FALSE)
# Chunk 21
birthday_freq <- count(birthdays, dates)
birthday_freq <- separate(birthday_freq, dates, c("month","day", "year"), sep="/", remove = FALSE)
# Chunk 22
ggplot(data = subset(birthdays, month == 8), aes(x=day))+
geom_bar()
# Chunk 23
ggplot(birthdays, aes(x=month))+
geom_bar()+
stat_bin(aes(label=..count..), geom="text")
ggplot(birthdays, aes(x=month))+
geom_bar()
ggplot(birthdays, aes(x=dates))+
geom_bar()+
coord_flip()
